import 'package:ferry/ferry.dart';
import 'package:super_core/super_core.dart';
import 'package:threedp_graphql/features/extrinsics/data/query/__generated__/get_extrnsics.data.gql.dart';
import 'package:threedp_graphql/features/extrinsics/data/repositories/extrinsic_datasource.dart';
import 'package:threedp_graphql/features/extrinsics/domain/extrisincs_request_params.dart';
import 'package:threedpass/core/polkawallet/bloc/app_service_cubit.dart';
import 'package:threedpass/core/polkawallet/utils/decode_address.dart';
import 'package:threedpass/features/wallet_screen/presentation/non_native_token_screen/domain/entities/transfer_non_native_token_atom.dart';
import 'package:threedpass/features/wallet_screen/presentation/non_native_token_screen/domain/entities/transfer_non_native_tokens_dto.dart';
import 'package:threedpass/features/wallet_screen/presentation/non_native_token_screen/domain/extensions/is_extrinsic_relevant.dart';

class AssetsExtrinsicsRepository {
  final Client client;
  final AppServiceLoaderCubit appServiceLoaderCubit;
  final ExtrinsicDatasourceGQL extrinsicsDatasourceGQL;

  const AssetsExtrinsicsRepository({
    required this.client,
    required this.appServiceLoaderCubit,
    required this.extrinsicsDatasourceGQL,
  });

  Future<Either<Failure, TransfersNonNativeTokenDTO>> right(
    final GGetExtrinsicsData rawResponse,
  ) async {
    final newTransfers = rawResponse.getExtrinsics;
    final newObjects = newTransfers!.objects!.toList();
    final nextPageKey = newTransfers.pageInfo!.pageNext!;

    final state = appServiceLoaderCubit.state;
    final address = state.keyring.current.address;
    final decoded = await state.decodeAddress(address!);

    final transferItems = <NonNativeTokenHistoryAtomBase>[];

    for (final obj in newObjects) {
      if (obj.isRelevant(decoded)) {
        final tmp = await NonNativeTokenHistoryAtomBase.fromAutoGeneratedObject(
          obj,
          appServiceLoaderCubit.state,
        );
        transferItems.add(tmp);
      }
    }

    return Either.right(
      TransfersNonNativeTokenDTO(
        objects: transferItems,
        nextPageKey: nextPageKey,
      ),
    );
  }

  Future<Either<Failure, TransfersNonNativeTokenDTO>> fetchExtrinsincs(
    final GetExtrisincsParams requestParams,
  ) async {
    final response =
        await extrinsicsDatasourceGQL.fetchExtrinsincs(requestParams);

    return response.when(
      left: (final e) {
        return Either.left(e);
      },
      right: right,
    );
  }
}
