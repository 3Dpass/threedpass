import 'dart:convert';

import 'package:threedp_graphql/features/tokens_events_history/data/query/__generated__/get_tokens_events.data.gql.dart';
import 'package:threedp_graphql/features/transfers_history/data/query/__generated__/get_transfers.data.gql.dart';
import 'package:threedpass/core/polkawallet/app_service.dart';

class TransferNonNativeTokenAtom {
  final GGetExtrinsicsData_getExtrinsics_objects autoGeneratedObject;
  final String? fromAddress;
  final String? toAddress;
  final String amount;
  final String symbol;
  final bool isFrom;

  const TransferNonNativeTokenAtom._(
    this.autoGeneratedObject, {
    required this.amount,
    required this.isFrom,
    required this.symbol,
    this.fromAddress,
    this.toAddress,
  });

  static Future<TransferNonNativeTokenAtom> fromAutoGeneratedObject(
    final GGetExtrinsicsData_getExtrinsics_objects autoGeneratedObject,
    final AppService appService,
  ) async {
    final service = appService.plugin.sdk.api.account.service;
    final ss58Format = appService.networkStateData.ss58Format;
    // autoGeneratedObject.callArguments
    // final fromAccountId = autoGeneratedObject.cal;
    // final toAccountId = autoGeneratedObject.toMultiAddressAccountId;

    final a1 = autoGeneratedObject.callArguments;
    final a2 = jsonDecode(a1!.value);

    String? fromAddress;
    String? toAddress;

    // I know this is not debuggable and unreadable. But this is the way it works.
    // try {
    //   final d1 = await service.encodeAddress([fromAccountId!], [ss58Format]);
    //   fromAddress = d1![ss58Format.toString()][fromAccountId] as String;
    // } on Object {
    //   fromAddress = null;
    // }

    // try {
    //   final d1 = await service.encodeAddress([toAccountId!], [ss58Format]);
    //   toAddress = d1![ss58Format.toString()][toAccountId] as String;
    // } on Object {
    //   toAddress = null;
    // }

    return TransferNonNativeTokenAtom._(
      autoGeneratedObject,
      amount: '1000000000000',
      isFrom: false,
      fromAddress: fromAddress,
      toAddress: toAddress,
      symbol: 'aaa',
    );
  }
}
