import 'dart:convert';

import 'package:ferry/ferry.dart';
import 'package:threedpass/core/polkawallet/bloc/app_service_cubit.dart';
import 'package:threedpass/core/polkawallet/utils/decode_address.dart';
import 'package:threedpass/features/graphql/extrinsics/data/repositories/extrinsic_datasource.dart';
import 'package:threedpass/features/graphql/extrinsics/domain/extrisincs_request_params.dart';
import 'package:threedpass/features/wallet_screen/non_native_token_screen/domain/entities/transfer_non_native_token_atom.dart';
import 'package:threedpass/features/wallet_screen/non_native_token_screen/domain/entities/transfer_non_native_tokens_dto.dart';
import 'package:threedpass/features/wallet_screen/non_native_token_screen/domain/extensions/is_extrinsic_relevant.dart';

class AssetsExtrinsicsRepository {
  final Client client;
  final AppServiceLoaderCubit appServiceLoaderCubit;
  final ExtrinsicDatasourceGQL extrinsicsDatasourceGQL;

  const AssetsExtrinsicsRepository({
    required this.client,
    required this.appServiceLoaderCubit,
    required this.extrinsicsDatasourceGQL,
  });

  Future<TransfersNonNativeTokenDTO> fetchExtrinsincs(
    final GetExtrisincsParams requestParams,
    final int assetId,
  ) async {
    final rawResponse =
        await extrinsicsDatasourceGQL.fetchExtrinsincs(requestParams);

    final newTransfers = rawResponse.getExtrinsics;
    final newObjects = newTransfers!.objects!.toList();
    final nextPageKey = newTransfers.pageInfo!.pageNext!;

    final state = appServiceLoaderCubit.state;
    final address = state.keyring.current.address;
    final decoded = await state.decodeAddress(address!);

    final transferItems = <NonNativeTokenHistoryAtomBase>[];

    for (final obj in newObjects) {
      if (obj!.isRelevant(decoded) &&
          jsonDecode(obj.callArguments?.value ?? '')[0]['value'] == assetId) {
        final tmp = await NonNativeTokenHistoryAtomBase.fromAutoGeneratedObject(
          obj,
          appServiceLoaderCubit.state,
        );
        transferItems.add(tmp);
      }
    }

    return TransfersNonNativeTokenDTO(
      objects: transferItems,
      nextPageKey: nextPageKey,
    );
  }
}
