import 'package:ferry/ferry.dart';
import 'package:threedpass/core/polkawallet/bloc/app_service_cubit.dart';
import 'package:threedpass/features/graphql/transfers_history/data/repositories/transfers_repo_remote.dart';
import 'package:threedpass/features/graphql/transfers_history/domain/entities/transfers_request_params.dart';
import 'package:threedpass/features/wallet_screen/transactions_history/domain/entities/transfer_item.dart';
import 'package:threedpass/features/wallet_screen/transactions_history/domain/entities/transfers_dto.dart';

class TransfersRepository {
  final Client client;
  final AppServiceLoaderCubit appServiceLoaderCubit;
  final TransfersDatasource transfersDatasourceGQL;

  const TransfersRepository({
    required this.client,
    required this.appServiceLoaderCubit,
    required this.transfersDatasourceGQL,
  });

  Future<TransfersDTO> fetchTransfers(
    final GetTransfersParams requestParams,
  ) async {
    final rawResponse = await transfersDatasourceGQL.get(requestParams);

    final newTransfers = rawResponse.getTransfers;
    final newObjects = newTransfers!.objects!.toList();
    final nextPageKey = newTransfers.pageInfo!.pageNext!;

    final transferItems = <TransferItem>[];

    for (final obj in newObjects) {
      final tmp = await TransferItem.fromAutoGeneratedObject(
        obj!,
        appServiceLoaderCubit.state,
      );
      transferItems.add(tmp);
    }

    return TransfersDTO(
      objects: transferItems,
      nextPageKey: nextPageKey,
    );
  }
}
