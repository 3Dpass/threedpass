# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.

# Get result
# flutter pub run dart_code_metrics:metrics analyze lib    


##################### Standart flutter linter #####################

# include: package:flutter_lints/flutter.yaml


# linter:
#   rules:
#     avoid_print: false  
#     prefer_single_quotes: true  #
#     always_use_package_imports: true
#     avoid_dynamic_calls: true
#     avoid_empty_else: true
#     avoid_relative_lib_imports: true

##################### Standart flutter linter #####################

include: package:extra_pedantic/analysis_options.yaml

linter:
  # All rules: https://github.com/dart-lang/linter/blob/master/lib/src/rules.dart
  rules:
    prefer_relative_imports: false
    use_build_context_synchronously: false  # TODO Is it possible to check if context is mounted? :(
    comment_references: false
    sort_pub_dependencies: false

    sort_child_properties_last: true
    leading_newlines_in_multiline_strings: true
    no_runtimeType_toString: true
    unnecessary_null_checks: true
    use_if_null_to_convert_nulls_to_bools: true
    use_key_in_widget_constructors: true
    use_late_for_private_fields_and_variables: true
    require_trailing_commas: true
    eol_at_end_of_file: true

    #######
    # - prefer_if_elements_to_conditional_expressions # Disabled because this rule decreases productivity by disturbing flow.
    # - prefer_foreach # Disabled because this rule decreases productivity by disturbing flow.
    # - always_require_non_null_named_parameters # Obsolete because of NNBD.
    # - prefer_void_to_null # Obsolete because of NNBD.
    # - camel_case_extensions # Disabled because an underscore is useful to represent domains in generated code.
    # - omit_local_variable_types # Too pedantic.
    # - prefer_adjacent_string_concatenation # No comment.
    # - prefer_single_quotes # Too pedantic.
    # - always_put_control_body_on_new_line # Too pedantic.
    # - always_specify_types # Too pedantic.
    # - avoid_as # Too pedantic.
    # - unnecessary_this # Too many false positives.
    # - prefer_bool_in_asserts # No comment.
    # - use_to_and_as_if_applicable # Too pedantic.
    # - use_super_parameters # Super parameters make inheritance more convenient, but inheritance should be avoided and composition should be preferred. Even if you need inheritance, you should declare an interface and mixins, and not use super constructors.
    # - prefer_function_declarations_over_variables # With variables, the return type can be omitted safely which is useful in FP-style code.
    # - always_use_package_imports # Prefer relative imports
    # - avoid_annotating_with_dynamic # It is better to always be explicit about dynamic.
    # - avoid_bool_literals_in_conditional_expressions # bool literals in conditional expressions make it easier to reason about them. X ? Y : Z is easier for humans than e.g. X || Z
    # - avoid_classes_with_only_static_members # Classes with static members don't pollute the global namespace.
    # - avoid_escaping_inner_quotes # Too pedantic.
    # - avoid_function_literals_in_foreach_calls # Disabled because this rule decreases productivity by disturbing flow.
    # - avoid_equals_and_hash_code_on_mutable_classes # @immutable depends on meta.
    # - avoid_positional_boolean_parameters # Too pedantic.
    # - avoid_print # Too pedantic.
    # - avoid_redundant_argument_values # Too pedantic.
    # - avoid_renaming_method_parameters # Too pedantic.
    # - avoid_setters_without_getters # Too pedantic.
    # - avoid_types_on_closure_parameters # Too pedantic.
    # - avoid_unnecessary_containers # Disabled because this rule decreases productivity by disturbing flow.
    # - camel_case_types # Underscores can be useful in generated code.
    # - cascade_invocations # Too pedantic.
    # - constant_identifier_names # Too pedantic.
    # - deprecated_consistency # Too pedantic.
    # - diagnostic_describe_all_properties # Too pedantic.
    # - flutter_style_todos # Too pedantic.
    # - do_not_use_environment # Too pedantic.
    # - leading_newlines_in_multiline_strings # Too pedantic.
    # - library_private_types_in_public_api # Too pedantic.
    # - lines_longer_than_80_chars # Too pedantic.
    # - missing_whitespace_between_adjacent_strings # Too pedantic.
    # - non_constant_identifier_names # Too pedantic.
    # - no_runtimeType_toString # Too pedantic.
    # - one_member_abstracts # Too pedantic.
    # - prefer_const_literals_to_create_immutables # Too pedantic.
    # - prefer_constructors_over_static_methods # Too pedantic.
    # - prefer_double_quotes # Too pedantic.
    # - prefer_expression_function_bodies # Too pedantic.
    # - prefer_interpolation_to_compose_strings # Too pedantic.
    # - prefer_int_literals # Too pedantic.
    # - prefer_is_not_operator # Too pedantic.
    # - public_member_api_docs # Too pedantic.
    # - sort_constructors_first # Too pedantic.
    # - super_goes_last # Deprecated
    # - unnecessary_brace_in_string_interps # Too pedantic.
    # - unnecessary_final # final tells the reader 'This variable won't be mutated.'
    # - unnecessary_lambdas # In rare cases it is possible for this to introduce bugs.
    # - unnecessary_null_checks # Too pedantic.
    # - unnecessary_raw_strings # Too pedantic.
    # - unnecessary_string_escapes # Too pedantic.
    # - unnecessary_string_interpolations # Too pedantic.
    # - use_if_null_to_convert_nulls_to_bools # Too pedantic.
    # - use_key_in_widget_constructors # Too pedantic.
    # - use_late_for_private_fields_and_variables # Too pedantic.
    # - use_named_constants # There could be multiple constants with the same value but different identifiers.
    # - use_raw_strings # Too pedantic.
    # - use_setters_to_change_properties # Too pedantic.
    # - null_check_on_nullable_type_parameter # Too many false positives.
    # - require_trailing_commas # Too pedantic.
    # - avoid_field_initializers_in_const_classes # Too pedantic.
    # - avoid_returning_null # Obsolete because of NNBD.
    # - depend_on_referenced_packages # Disabled because this rule decreases productivity by disturbing flow.
    # - eol_at_end_of_file # Too pedantic.
    # - no_leading_underscores_for_library_prefixes # Too pedantic.
    # - no_leading_underscores_for_local_identifiers # Too pedantic.
    # - avoid_final_parameters # No comment.
    # - sized_box_shrink_expand # Disabled because this rule decreases productivity by disturbing flow.
    # - avoid_private_typedef_functions # Too pedantic.
    # - avoid_multiple_declarations_per_line # Has false positives.
    # - use_decorated_box # Disabled because this rule decreases productivity by disturbing flow.
    # - use_test_throws_matchers # Too pedantic.
    # - sized_box_for_whitespace # Disabled because this rule decreases productivity by disturbing flow.
    # - invariant_booleans # Too many false positives.
    # - sort_child_properties_last # Too pedantic.


analyzer:
  ### extra_pedantic ###
  strong-mode:
      # https://github.com/dart-lang/language/tree/master/resources/type-system
      implicit-casts: false
      implicit-dynamic: true
  language:
    # https://github.com/dart-lang/language/tree/master/resources/type-system
    strict-inference: true
    strict-raw-types: true
    strict-casts: true
  errors:
    inference_failure_on_function_invocation: false
  ### extra_pedantic ###

  plugins:
    - dart_code_metrics
  exclude:
    - '**/*.g.dart'
    - '**/*.freezed.dart'
    - '**/*.gr.dart'
    - lib/generated/**

dart_code_metrics:
  metrics:
    cyclomatic-complexity: 10
    halstead-volume: 500
    lines-of-code: 80
    maintainability-index: 40
    maximum-nesting-level: 5
    number-of-methods: 10
    number-of-parameters: 8
  metrics-exclude:
    - test/**
    - lib/setup.dart
  rules:
    # Common rules
    - no-boolean-literal-compare
    - no-empty-block
    - prefer-trailing-comma
    - prefer-first
    - prefer-last
    - no-equal-then-else
    # Flutter specific
    - avoid-border-all
    - avoid-returning-widgets
    - avoid-unnecessary-setstate
    - avoid-wrapping-in-padding
    - prefer-const-border-radius
    - prefer-extracting-callbacks
    - prefer-single-widget-per-file:
        ignore-private-widgets: true
  anti-patterns:
    - long-method
    - long-parameter-list