def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
  keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 31

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    splits {
        abi {
            reset()
            include "arm64-v8a"
        }
    }

    defaultConfig {
        applicationId "com.threedpass.wallet"
        minSdkVersion 24
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        if (System.getenv("KEYSTORE_PATH")) {
            signingConfig signingConfigs.release
            resValue "string", "app_name", "3DPass"

            println "Release properties"
        } else {
            signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            resValue "string", "app_name", "3DPass debug"

            println "Debug properties"
        }
    }

    // buildTypes {
    //     release {
    //         if (false) {
    //             signingConfig signingConfigs.release
    //             println "Signing with key.properties"
    //         } else {
    //             signingConfig signingConfigs.debug
    //             applicationIdSuffix '.debug'
    //             versionNameSuffix '-DEBUG'
    //             resValue "string", "app_name", "3DPass debug"

    //             println "Signing with debug keys"
    //         }
    //     }
    // }


    signingConfigs {
        release {
            if (System.getenv("KEYSTORE_PATH")){
                println("signingConfigs release")
                // If you are reading these lines check the link:
                // https://proandroiddev.com/how-to-securely-build-and-sign-your-android-app-with-github-actions-ad5323452ce
                storeFile = file(System.getenv("KEYSTORE_PATH"))
                storePassword System.getenv("SIGNING_STORE_PASSWORD")
                keyAlias System.getenv("SIGNING_KEY_ALIAS")
                keyPassword System.getenv("SIGNING_KEY_PASSWORD")
            } else{
                println("signingConfigs debug")
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
